// Configuration Firebase depuis les variables d'environnement
const firebaseConfig = window.FIREBASE_CONFIG || {
    // Fallback par d√©faut (non fonctionnel)
    apiKey: "CONFIGURE_YOUR_FIREBASE_CONFIG_IN_.env.js",
    authDomain: "CONFIGURE_YOUR_FIREBASE_CONFIG_IN_.env.js",
    projectId: "CONFIGURE_YOUR_FIREBASE_CONFIG_IN_.env.js",
    storageBucket: "CONFIGURE_YOUR_FIREBASE_CONFIG_IN_.env.js",
    messagingSenderId: "CONFIGURE_YOUR_FIREBASE_CONFIG_IN_.env.js",
    appId: "CONFIGURE_YOUR_FIREBASE_CONFIG_IN_.env.js"
};

// Variables globales Firebase
let firebase_initialized = false;
let db = null;

// Initialisation Firebase
function initFirebase() {
    try {
        // V√©rifier si Firebase est d√©sactiv√©
        if (window.FIREBASE_ENABLED === false) {
            console.log("üîí Firebase d√©sactiv√© via .env.js");
            return false;
        }

        // V√©rifier si la config est celle par d√©faut (pas configur√©e)
        if (firebaseConfig.apiKey.includes("CONFIGURE_YOUR_FIREBASE")) {
            console.log("‚öôÔ∏è Firebase non configur√© - modifiez .env.js avec vos vraies cl√©s");
            return false;
        }

        if (!firebase_initialized && typeof firebase !== 'undefined') {
            firebase.initializeApp(firebaseConfig);
            db = firebase.firestore();
            firebase_initialized = true;
            console.log("üî• Firebase initialis√© avec succ√®s");
            console.log("üîê Configuration charg√©e depuis .env.js (s√©curis√©)");
            return true;
        }
    } catch (error) {
        console.warn("‚ö†Ô∏è Firebase non configur√©:", error.message);
        return false;
    }
    return firebase_initialized;
}

// Fonctions de sauvegarde et chargement Firestore
async function saveToFirestore(data) {
    if (!firebase_initialized || !db) {
        console.log("üì¶ Firebase non configur√©, utilisation du localStorage");
        return false;
    }

    try {
        const userDoc = db.collection('game-libraries').doc('user-data');
        await userDoc.set({
            games: data,
            lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
        });
        console.log("‚òÅÔ∏è Donn√©es sauvegard√©es sur Firestore");
        return true;
    } catch (error) {
        console.error("‚ùå Erreur sauvegarde Firestore:", error);
        return false;
    }
}

async function loadFromFirestore() {
    if (!firebase_initialized || !db) {
        console.log("üì¶ Firebase non configur√©, utilisation du localStorage");
        return null;
    }

    try {
        const userDoc = await db.collection('game-libraries').doc('user-data').get();
        if (userDoc.exists) {
            const data = userDoc.data();
            console.log("‚òÅÔ∏è Donn√©es charg√©es depuis Firestore");
            return data.games;
        }
        console.log("üìÇ Aucune donn√©es trouv√©es sur Firestore");
        return null;
    } catch (error) {
        console.error("‚ùå Erreur chargement Firestore:", error);
        return null;
    }
}

// Synchronisation bidirectionnelle
async function syncData() {
    if (!firebase_initialized) {
        return false;
    }

    try {
        // Charger les donn√©es locales
        const localData = loadFromLocalStorage();

        // Charger les donn√©es cloud
        const cloudData = await loadFromFirestore();

        if (!cloudData) {
            // Pas de donn√©es cloud, sauvegarder les donn√©es locales
            if (localData && Object.keys(localData).length > 0) {
                await saveToFirestore(localData);
                console.log("‚¨ÜÔ∏è Donn√©es locales sauvegard√©es vers le cloud");
            }
            return true;
        }

        if (!localData || Object.keys(localData).length === 0) {
            // Pas de donn√©es locales, utiliser les donn√©es cloud
            saveToLocalStorage(cloudData);
            console.log("‚¨áÔ∏è Donn√©es cloud charg√©es localement");
            return true;
        }

        // Les deux existent - pour simplicit√©, on privil√©gie les donn√©es cloud
        // Dans une vraie app, on comparerait les timestamps
        saveToLocalStorage(cloudData);
        console.log("üîÑ Synchronisation: donn√©es cloud utilis√©es");
        return true;

    } catch (error) {
        console.error("‚ùå Erreur de synchronisation:", error);
        return false;
    }
}